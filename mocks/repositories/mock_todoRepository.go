// Code generated by MockGen. DO NOT EDIT.
// Source: TodoAPI/repositories (interfaces: TodoRepository)

// Package repositories is a generated GoMock package.
package repositories

import (
	models "TodoAPI/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// DeleteTodo mocks base method.
func (m *MockTodoRepository) DeleteTodo(arg0 primitive.ObjectID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MockTodoRepositoryMockRecorder) DeleteTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MockTodoRepository)(nil).DeleteTodo), arg0)
}

// GetTodo mocks base method.
func (m *MockTodoRepository) GetTodo() ([]models.TodoModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodo")
	ret0, _ := ret[0].([]models.TodoModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodo indicates an expected call of GetTodo.
func (mr *MockTodoRepositoryMockRecorder) GetTodo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodo", reflect.TypeOf((*MockTodoRepository)(nil).GetTodo))
}

// PostTodo mocks base method.
func (m *MockTodoRepository) PostTodo(arg0 models.TodoModel) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostTodo", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostTodo indicates an expected call of PostTodo.
func (mr *MockTodoRepositoryMockRecorder) PostTodo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostTodo", reflect.TypeOf((*MockTodoRepository)(nil).PostTodo), arg0)
}
